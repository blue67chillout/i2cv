
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/test/src/test.v
Parsing SystemVerilog input from `/openlane/designs/test/src/test.v' to AST representation.
Generating RTLIL representation for module `\test'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/hierarchy.dot'.
Dumping module test to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \test

3.2. Analyzing design hierarchy..
Top module:  \test
Removed 0 unused modules.
Renaming module test to test.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \test

5.2. Analyzing design hierarchy..
Top module:  \test
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/test/src/test.v:140$55 in module test.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/test/src/test.v:124$30 in module test.
Marked 9 switch rules as full_case in process $proc$/openlane/designs/test/src/test.v:50$12 in module test.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/test/src/test.v:42$8 in module test.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 7 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\test.$proc$/openlane/designs/test/src/test.v:34$57'.
  Set init value: \counter = 3'000
Found init rule in `\test.$proc$/openlane/designs/test/src/test.v:32$56'.
  Set init value: \clk_temp = 1'0

10. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\test.$proc$/openlane/designs/test/src/test.v:140$55'.
Found async reset \rst in `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
Found async reset \rst in `\test.$proc$/openlane/designs/test/src/test.v:50$12'.

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~11 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:34$57'.
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:32$56'.
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:140$55'.
     1/1: $1\sda_out[0:0]
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
     1/9: $2$lookahead\dout$29[7:0]$42
     2/9: $2$bitselwrite$sel$/openlane/designs/test/src/test.v:133$3[2:0]$41
     3/9: $2$bitselwrite$data$/openlane/designs/test/src/test.v:133$2[7:0]$40
     4/9: $2$bitselwrite$mask$/openlane/designs/test/src/test.v:133$1[7:0]$39
     5/9: $1$lookahead\dout$29[7:0]$38
     6/9: $1$bitselwrite$sel$/openlane/designs/test/src/test.v:133$3[2:0]$37
     7/9: $1$bitselwrite$data$/openlane/designs/test/src/test.v:133$2[7:0]$36
     8/9: $1$bitselwrite$mask$/openlane/designs/test/src/test.v:133$1[7:0]$35
     9/9: $0\sda_out[0:0]
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
     1/4: $0\count[2:0]
     2/4: $0\saved_data[7:0]
     3/4: $0\addrw[7:0]
     4/4: $0\state[3:0]
Creating decoders for process `\test.$proc$/openlane/designs/test/src/test.v:42$8'.
     1/2: $0\counter[2:0]
     2/2: $0\clk_temp[0:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\test.\sda_out' using process `\test.$proc$/openlane/designs/test/src/test.v:140$55'.
  created $adff cell `$procdff$173' with positive edge clock and positive level reset.
Creating register for signal `\test.\dout' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $dff cell `$procdff$176' with negative edge clock.
Creating register for signal `\test.\sda_out' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $adff cell `$procdff$177' with negative edge clock and positive level reset.
Creating register for signal `\test.$bitselwrite$mask$/openlane/designs/test/src/test.v:133$1' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $adff cell `$procdff$178' with negative edge clock and positive level reset.
Creating register for signal `\test.$bitselwrite$data$/openlane/designs/test/src/test.v:133$2' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $adff cell `$procdff$179' with negative edge clock and positive level reset.
Creating register for signal `\test.$bitselwrite$sel$/openlane/designs/test/src/test.v:133$3' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $adff cell `$procdff$180' with negative edge clock and positive level reset.
Creating register for signal `\test.$lookahead\dout$29' using process `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
  created $adff cell `$procdff$181' with negative edge clock and positive level reset.
Creating register for signal `\test.\state' using process `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
  created $adff cell `$procdff$182' with positive edge clock and positive level reset.
Creating register for signal `\test.\addrw' using process `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
  created $dff cell `$procdff$185' with positive edge clock.
Creating register for signal `\test.\saved_data' using process `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
  created $dff cell `$procdff$188' with positive edge clock.
Creating register for signal `\test.\count' using process `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\test.\clk_temp' using process `\test.$proc$/openlane/designs/test/src/test.v:42$8'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\test.\counter' using process `\test.$proc$/openlane/designs/test/src/test.v:42$8'.
  created $dff cell `$procdff$193' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:34$57'.
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:32$56'.
Found and cleaned up 1 empty switch in `\test.$proc$/openlane/designs/test/src/test.v:140$55'.
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:140$55'.
Found and cleaned up 1 empty switch in `\test.$proc$/openlane/designs/test/src/test.v:124$30'.
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:124$30'.
Found and cleaned up 8 empty switches in `\test.$proc$/openlane/designs/test/src/test.v:50$12'.
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:50$12'.
Found and cleaned up 1 empty switch in `\test.$proc$/openlane/designs/test/src/test.v:42$8'.
Removing empty process `test.$proc$/openlane/designs/test/src/test.v:42$8'.
Cleaned up 11 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module test...
Warning: multiple conflicting drivers for test.\sda_out:
    port Q[0] of cell $procdff$177 ($adff)
    port Q[0] of cell $procdff$173 ($adff)
Found and reported 1 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~19 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 12 unused cells and 59 unused wires.
<suppressed ~15 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
    New ctrl vector for $pmux cell $procmux$88: { $procmux$113_CMP $procmux$112_CMP $procmux$108_CMP $auto$opt_reduce.cc:134:opt_pmux$197 $auto$opt_reduce.cc:134:opt_pmux$195 }
  Optimizing cells in module \test.
Performed a total of 1 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

22.16. Rerunning OPT passes. (Maybe there is more to do..)

22.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

22.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

22.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

22.20. Executing OPT_DFF pass (perform DFF optimizations).

22.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

22.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

22.23. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking test.state as FSM state register:
    Circuit seems to be self-resetting.

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$193 ($dff) from module test (D = $add$/openlane/designs/test/src/test.v:47$11_Y [2:0], Q = \counter, rval = 3'000).
Adding EN signal on $procdff$192 ($dff) from module test (D = $not$/openlane/designs/test/src/test.v:44$10_Y, Q = \clk_temp).
Adding EN signal on $procdff$191 ($dff) from module test (D = $0\count[2:0], Q = \count).
Adding EN signal on $procdff$188 ($dff) from module test (D = \din, Q = \saved_data).
Adding EN signal on $procdff$185 ($dff) from module test (D = { \addr \rw }, Q = \addrw).
Adding EN signal on $procdff$182 ($adff) from module test (D = $0\state[3:0], Q = \state).
Adding EN signal on $procdff$177 ($adff) from module test (D = $0\sda_out[0:0], Q = \sda_out).
Adding EN signal on $procdff$176 ($dff) from module test (D = $or$/openlane/designs/test/src/test.v:0$54_Y, Q = \dout).
Adding EN signal on $procdff$173 ($adff) from module test (D = $1\sda_out[0:0], Q = \sda_out).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 9 unused cells and 9 unused wires.
<suppressed ~10 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~4 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from port B of cell test.$eq$/openlane/designs/test/src/test.v:43$9 ($eq).
Removed top 31 bits (of 32) from port B of cell test.$add$/openlane/designs/test/src/test.v:47$11 ($add).
Removed top 29 bits (of 32) from port Y of cell test.$add$/openlane/designs/test/src/test.v:47$11 ($add).
Removed top 31 bits (of 32) from port B of cell test.$sub$/openlane/designs/test/src/test.v:69$16 ($sub).
Removed top 29 bits (of 32) from port Y of cell test.$sub$/openlane/designs/test/src/test.v:69$16 ($sub).
Removed top 28 bits (of 32) from port A of cell test.$neg$/openlane/designs/test/src/test.v:0$46 ($neg).
Converting cell test.$neg$/openlane/designs/test/src/test.v:0$46 ($neg) from signed to unsigned.
Removed top 1 bits (of 4) from port A of cell test.$neg$/openlane/designs/test/src/test.v:0$46 ($neg).
Removed top 1 bits (of 4) from port B of cell test.$procmux$101_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test.$procmux$108_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test.$procmux$112_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell test.$procmux$113_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell test.$procmux$134_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test.$procmux$145_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell test.$procmux$149_CMP0 ($eq).
Removed top 29 bits (of 32) from wire test.$add$/openlane/designs/test/src/test.v:47$11_Y.
Removed top 29 bits (of 32) from wire test.$sub$/openlane/designs/test/src/test.v:69$16_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module test:
  creating $macc model for $add$/openlane/designs/test/src/test.v:47$11 ($add).
  creating $macc model for $neg$/openlane/designs/test/src/test.v:0$46 ($neg).
  creating $macc model for $sub$/openlane/designs/test/src/test.v:69$16 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/test/src/test.v:69$16.
  creating $alu model for $macc $neg$/openlane/designs/test/src/test.v:0$46.
  creating $alu model for $macc $add$/openlane/designs/test/src/test.v:47$11.
  creating $alu cell for $add$/openlane/designs/test/src/test.v:47$11: $auto$alumacc.cc:485:replace_alu$247
  creating $alu cell for $neg$/openlane/designs/test/src/test.v:0$46: $auto$alumacc.cc:485:replace_alu$250
  creating $alu cell for $sub$/openlane/designs/test/src/test.v:69$16: $auto$alumacc.cc:485:replace_alu$253
  created 3 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~11 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
    Consolidated identical input bits for $mux cell $procmux$138:
      Old ports: A=4'0111, B=4'1001, Y=$procmux$138_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$138_Y [3] $procmux$138_Y [1] }
      New connections: { $procmux$138_Y [2] $procmux$138_Y [0] } = { $procmux$138_Y [1] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$143:
      Old ports: A=4'0101, B=4'1001, Y=$procmux$143_Y
      New ports: A=2'01, B=2'10, Y=$procmux$143_Y [3:2]
      New connections: $procmux$143_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $procmux$155:
      Old ports: A=4'1001, B=4'0111, Y=$procmux$155_Y
      New ports: A=2'10, B=2'01, Y={ $procmux$155_Y [3] $procmux$155_Y [1] }
      New connections: { $procmux$155_Y [2] $procmux$155_Y [0] } = { $procmux$155_Y [1] 1'1 }
    New ctrl vector for $pmux cell $procmux$88: $auto$opt_reduce.cc:134:opt_pmux$257
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_pmux$256: { $procmux$149_CMP $procmux$112_CMP $procmux$101_CMP }
  Optimizing cells in module \test.
    Consolidated identical input bits for $mux cell $procmux$158:
      Old ports: A=$procmux$155_Y, B=4'0101, Y=$procmux$158_Y
      New ports: A={ $procmux$155_Y [3] $procmux$155_Y [1] $procmux$155_Y [1] }, B=3'010, Y=$procmux$158_Y [3:1]
      New connections: $procmux$158_Y [0] = 1'1
  Optimizing cells in module \test.
Performed a total of 6 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

35.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$78 in front of them:
        $shiftx$/openlane/designs/test/src/test.v:0$44
        $shiftx$/openlane/designs/test/src/test.v:0$43

35.7. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$200 ($dffe) from module test (D = $auto$wreduce.cc:461:run$246 [2:0], Q = \count, rval = 3'111).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~1 debug messages>

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
    New ctrl vector for $pmux cell $procmux$78: { $auto$opt_reduce.cc:134:opt_pmux$263 $procmux$141_CMP }
  Optimizing cells in module \test.
Performed a total of 1 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using template $paramod$117a422dd91271f31dcbd629d7b52dc0eb1e49ab\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$constmap:ee5af906ae0d3d414c6a0471604c553ef70c8e09$paramod$92adee9538f2381d8e5006822c900eb986d754e8\_90_shift_shiftx for cells of type $shiftx.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$constmap:53f81d327ce76cbf6a8a98434119a90a4847620f$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $sdff.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:104da9d1db7a1a3d3040fc47e9181bb90c2db772$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx'.

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:104da9d1db7a1a3d3040fc47e9181bb90c2db772$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$465.
    dead port 2/2 on $mux $procmux$459.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$447.
Removed 4 multiplexer ports.
<suppressed ~512 debug messages>

36.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:104da9d1db7a1a3d3040fc47e9181bb90c2db772$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx.
<suppressed ~29 debug messages>
Removed 0 unused cells and 9 unused wires.
Using template $paramod$constmap:104da9d1db7a1a3d3040fc47e9181bb90c2db772$paramod$21dee603dc19e4530a14795556c80eafcc4f26b8\_90_shift_shiftx for cells of type $shift.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$b6ec48645094baeb70d6b93add0cdbbe7498ad3c\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
No more expansions possible.
<suppressed ~630 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~694 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~435 debug messages>
Removed a total of 145 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 43 unused cells and 497 unused wires.
<suppressed ~44 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\test' to `<abc-temp-dir>/input.blif'..
Extracted 242 gates and 283 wires to a netlist network with 39 inputs and 32 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               AND cells:        4
ABC RESULTS:               NOR cells:       10
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        4
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              NAND cells:        6
ABC RESULTS:             ORNOT cells:       14
ABC RESULTS:            ANDNOT cells:       55
ABC RESULTS:                OR cells:       58
ABC RESULTS:        internal signals:      212
ABC RESULTS:           input signals:       39
ABC RESULTS:          output signals:       32
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.
<suppressed ~8 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 1 unused cells and 179 unused wires.
<suppressed ~2 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \test

40.2. Analyzing design hierarchy..
Top module:  \test
Removed 0 unused modules.

41. Printing statistics.

=== test ===

   Number of wires:                188
   Number of wire bits:            269
   Number of public wires:          17
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                215
     $_ANDNOT_                      54
     $_AND_                          4
     $_DFFE_NP1N_                    1
     $_DFFE_NP_                      8
     $_DFFE_PN_                      1
     $_DFFE_PP0P_                    3
     $_DFFE_PP1P_                    2
     $_DFFE_PP_                     16
     $_MUX_                         16
     $_NAND_                         6
     $_NOR_                         10
     $_NOT_                         11
     $_ORNOT_                       14
     $_OR_                          58
     $_SDFFCE_PN1P_                  3
     $_SDFF_PN0_                     3
     $_XNOR_                         1
     $_XOR_                          4

42. Executing CHECK pass (checking for obvious problems).
Checking module test...
Warning: multiple conflicting drivers for test.\sda_out:
    port Q[0] of cell $auto$ff.cc:266:slice$840 ($_DFFE_PP1P_)
    port Q[0] of cell $auto$ff.cc:266:slice$849 ($_DFFE_NP1N_)
Found and reported 1 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/post_techmap.dot'.
Dumping module test to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \test..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \test.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\test'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module test.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..

47. Printing statistics.

=== test ===

   Number of wires:                188
   Number of wire bits:            269
   Number of public wires:          17
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                215
     $_ANDNOT_                      54
     $_AND_                          4
     $_DFFE_NP1N_                    1
     $_DFFE_NP_                      8
     $_DFFE_PN_                      1
     $_DFFE_PP0P_                    3
     $_DFFE_PP1P_                    2
     $_DFFE_PP_                     16
     $_MUX_                         16
     $_NAND_                         6
     $_NOR_                         10
     $_NOT_                         11
     $_ORNOT_                       14
     $_OR_                          58
     $_SDFFCE_PN1P_                  3
     $_SDFF_PN0_                     3
     $_XNOR_                         1
     $_XOR_                          4

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /Users/kushal/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/Users/kushal/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /Users/kushal/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/Users/kushal/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\test':
  mapped 3 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.
  mapped 3 $_DFF_PN1_ cells to \sky130_fd_sc_hd__dfstp_2 cells.
  mapped 31 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== test ===

   Number of wires:                243
   Number of wire bits:            324
   Number of public wires:          17
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                270
     $_ANDNOT_                      54
     $_AND_                          4
     $_MUX_                         56
     $_NAND_                         6
     $_NOR_                         10
     $_NOT_                         26
     $_ORNOT_                       14
     $_OR_                          58
     $_XNOR_                         1
     $_XOR_                          4
     sky130_fd_sc_hd__dfrtp_2        3
     sky130_fd_sc_hd__dfstp_2        3
     sky130_fd_sc_hd__dfxtp_2       31

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\test' to `/tmp/yosys-abc-gR2E0d/input.blif'..
Extracted 233 gates and 290 wires to a netlist network with 55 inputs and 54 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-gR2E0d/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-gR2E0d/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-gR2E0d/input.blif 
ABC: + read_lib -w /openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.07 sec
ABC: Memory =    9.54 MB. Time =     0.07 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/test/runs/RUN_2024.05.31_13.51.22/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1837.24 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    145 ( 31.0 %)   Cap = 13.5 ff (  6.6 %)   Area =     1116.07 ( 68.3 %)   Delay =  1881.64 ps  ( 13.1 %)               
ABC: Path  0 --       1 : 0    8 pi                        A =   0.00  Df =  55.8  -30.9 ps  S =  83.6 ps  Cin =  0.0 ff  Cout =  16.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     110 : 4    4 sky130_fd_sc_hd__nand4b_2 A =  15.01  Df = 258.0  -37.8 ps  S = 132.3 ps  Cin =  3.7 ff  Cout =  13.4 ff  Cmax = 200.5 ff  G =  340  
ABC: Path  2 --     161 : 2    3 sky130_fd_sc_hd__or2_2    A =   6.26  Df = 582.0 -215.1 ps  S =  70.7 ps  Cin =  1.5 ff  Cout =   8.9 ff  Cmax = 299.4 ff  G =  574  
ABC: Path  3 --     175 : 2    2 sky130_fd_sc_hd__or2_2    A =   6.26  Df = 878.4 -180.5 ps  S =  55.1 ps  Cin =  1.5 ff  Cout =   3.1 ff  Cmax = 299.4 ff  G =  207  
ABC: Path  4 --     179 : 3    1 sky130_fd_sc_hd__or3b_2   A =   8.76  Df =1338.7 -542.2 ps  S =  77.8 ps  Cin =  1.5 ff  Cout =   3.4 ff  Cmax = 269.2 ff  G =  213  
ABC: Path  5 --     180 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =1662.7 -659.7 ps  S =  45.7 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  6 --     181 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1881.6 -558.7 ps  S = 396.3 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi0 (\state [3]).  End-point = po12 ($auto$rtlil.cc:2669:MuxGate$2404).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   55/   54  lat =    0  nd =   145  edge =    346  area =1116.03  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-gR2E0d/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       17
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        3
ABC RESULTS:        internal signals:      181
ABC RESULTS:           input signals:       55
ABC RESULTS:          output signals:       54
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test..
Removed 29 unused cells and 352 unused wires.
<suppressed ~30 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module test...
Warning: Wire test.\sda is used but has no driver.
Warning: Wire test.\scl is used but has no driver.
Warning: Wire test.\dout [7] is used but has no driver.
Warning: Wire test.\dout [6] is used but has no driver.
Warning: Wire test.\dout [5] is used but has no driver.
Warning: Wire test.\dout [4] is used but has no driver.
Warning: Wire test.\dout [3] is used but has no driver.
Warning: Wire test.\dout [2] is used but has no driver.
Warning: Wire test.\dout [1] is used but has no driver.
Warning: Wire test.\dout [0] is used but has no driver.
Found and reported 10 problems.

61. Printing statistics.

=== test ===

   Number of wires:                181
   Number of wire bits:            201
   Number of public wires:          38
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                182
     sky130_fd_sc_hd__a211o_2        2
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         3
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a221o_2        5
     sky130_fd_sc_hd__a22o_2         6
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a32o_2         1
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1         28
     sky130_fd_sc_hd__dfrtp_2        3
     sky130_fd_sc_hd__dfstp_2        3
     sky130_fd_sc_hd__dfxtp_2       31
     sky130_fd_sc_hd__inv_2         17
     sky130_fd_sc_hd__mux2_2        23
     sky130_fd_sc_hd__nand2_2        9
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2         6
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__o211a_2        3
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__or2_2          5
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         4
     sky130_fd_sc_hd__or4b_2         2
     sky130_fd_sc_hd__xnor2_2        3

   Chip area for module '\test': 1933.104000

62. Executing Verilog backend.
Dumping module `\test'.

63. Executing JSON backend.

Warnings: 12 unique messages, 12 total
End of script. Logfile hash: 4d28ea8ac6, CPU: user 0.40s system 0.03s, MEM: 29.96 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 50% 2x abc (0 sec), 9% 30x opt_expr (0 sec), ...
